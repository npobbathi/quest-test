/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { Button } from '@mui/material';
import { Helmet } from 'react-helmet-async';
import { styled } from '@mui/material/styles';
import Image1Image from 'src/assets/images/CardFlexwQuestKIT_Image.png';
import { animated, useSpring, easings } from 'react-spring';

const Property1Default = styled('div')({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  boxShadow: `0px 4px 6px rgba(3, 0, 161, 0.2)`,
  borderRadius: `8px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
  height: 'auto',
});

const Image1 = styled('div')({
  backgroundImage: `url(${Image1Image})`,
  backgroundPosition: `center`,
  backgroundSize: `cover`,
  backgroundRepeat: `no-repeat`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  alignSelf: `stretch`,
  height: `257px`,
  margin: `0px`,
  overflow: `hidden`,
});

const TextButton = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px 40px 60px 40px`,
  boxSizing: `border-box`,
  margin: `30px 0px 0px 0px`,
});

const LoremIpsumTestToBeSe = styled('div')({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(0, 0, 0, 1)`,
  fontStyle: `normal`,
  fontFamily: `Heebo`,
  fontWeight: `400`,
  fontSize: `20px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  width: `297.86px`,
  margin: `0px`,
});

const ButtonClicked = styled('div')({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(107, 104, 255, 1)`,
  fontStyle: `normal`,
  fontFamily: `Heebo`,
  fontWeight: `700`,
  fontSize: `20px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  height: `48px`,
  width: `138px`,
  margin: `30px 0px 0px 0px`,
});

const ButtonContained = animated(
  styled(Button)(({ theme }) => ({
    margin: `30px 0px 0px 0px`,
    color: theme.palette['Primary']['Contrast'],
    fontStyle: theme.typography['Components']['Button Font - Large'].fontStyle,
    fontFamily:
      theme.typography['Components']['Button Font - Large'].fontFamily,
    fontWeight:
      theme.typography['Components']['Button Font - Large'].fontWeight,
    fontSize: theme.typography['Components']['Button Font - Large'].fontSize,
    letterSpacing:
      theme.typography['Components']['Button Font - Large'].letterSpacing,
    lineHeight:
      theme.typography['Components']['Button Font - Large'].lineHeight,
    textDecoration:
      theme.typography['Components']['Button Font - Large'].textDecoration,
    textTransform:
      theme.typography['Components']['Button Font - Large'].textTransform,
  }))
);

function CardFlexWQuestKit(props) {
  const [ButtonContainedSpring, ButtonContainedApi] = useSpring(() => ({
    config: {
      duration: 100,
      easing: easings['easeOutBack'],
    },
    delay: 0,
    from: { transform: 'scale(1)' },
  }));
  return (
    <Property1Default className={props.className}>
      <Helmet>
        <title>CardFlexWQuestKit</title>
      </Helmet>
      <Image1></Image1>
      <TextButton>
        <LoremIpsumTestToBeSe>
          {`Lorem ipsum test to be seen and not read for placement only. Lorem ipsum test to be seen.`}
        </LoremIpsumTestToBeSe>
        {false && <ButtonClicked>{`Button Clicked!`}</ButtonClicked>}
        <ButtonContained
          variant="contained"
          size={'large'}
          color={'primary'}
          disabled={false}
          onMouseEnter={() => {
            ButtonContainedApi.start({
              ...{ transform: 'scale(1.1)' },
              delay: 0,
            });
          }}
          onMouseLeave={() => {
            ButtonContainedApi.start({ transform: 'scale(1)' });
          }}
          style={{ ...ButtonContainedSpring }}
        >
          {'Large'}
        </ButtonContained>
      </TextButton>
    </Property1Default>
  );
}

export default CardFlexWQuestKit;
