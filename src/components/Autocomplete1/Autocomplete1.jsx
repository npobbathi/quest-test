/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { Autocomplete, TextField } from '@mui/material';
import { styled } from '@mui/material/styles';

const Autocomplete2 = styled('div')({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `20px`,
  boxSizing: `border-box`,
  height: 'auto',
});

const Autocomplete3 = styled(Autocomplete)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Components']['Helper'].fontStyle,
  fontFamily: theme.typography['Components']['Helper'].fontFamily,
  fontWeight: theme.typography['Components']['Helper'].fontWeight,
  fontSize: theme.typography['Components']['Helper'].fontSize,
  letterSpacing: theme.typography['Components']['Helper'].letterSpacing,
  lineHeight: theme.typography['Components']['Helper'].lineHeight,
  textDecoration: theme.typography['Components']['Helper'].textDecoration,
  textTransform: theme.typography['Components']['Helper'].textTransform,
}));

const Autocomplete4 = styled(Autocomplete)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `28px 0px 0px 0px`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Components']['Label'].fontStyle,
  fontFamily: theme.typography['Components']['Label'].fontFamily,
  fontWeight: theme.typography['Components']['Label'].fontWeight,
  fontSize: theme.typography['Components']['Label'].fontSize,
  letterSpacing: theme.typography['Components']['Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Label'].lineHeight,
  textDecoration: theme.typography['Components']['Label'].textDecoration,
  textTransform: theme.typography['Components']['Label'].textTransform,
}));

const Autocomplete5 = styled(Autocomplete)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `28px 0px 0px 0px`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Components']['Label'].fontStyle,
  fontFamily: theme.typography['Components']['Label'].fontFamily,
  fontWeight: theme.typography['Components']['Label'].fontWeight,
  fontSize: theme.typography['Components']['Label'].fontSize,
  letterSpacing: theme.typography['Components']['Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Label'].lineHeight,
  textDecoration: theme.typography['Components']['Label'].textDecoration,
  textTransform: theme.typography['Components']['Label'].textTransform,
}));

const Autocomplete6 = styled(Autocomplete)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `28px 0px 0px 0px`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Components']['Label'].fontStyle,
  fontFamily: theme.typography['Components']['Label'].fontFamily,
  fontWeight: theme.typography['Components']['Label'].fontWeight,
  fontSize: theme.typography['Components']['Label'].fontSize,
  letterSpacing: theme.typography['Components']['Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Label'].lineHeight,
  textDecoration: theme.typography['Components']['Label'].textDecoration,
  textTransform: theme.typography['Components']['Label'].textTransform,
}));

const Autocomplete7 = styled(Autocomplete)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `28px 0px 0px 0px`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Components']['Label'].fontStyle,
  fontFamily: theme.typography['Components']['Label'].fontFamily,
  fontWeight: theme.typography['Components']['Label'].fontWeight,
  fontSize: theme.typography['Components']['Label'].fontSize,
  letterSpacing: theme.typography['Components']['Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Label'].lineHeight,
  textDecoration: theme.typography['Components']['Label'].textDecoration,
  textTransform: theme.typography['Components']['Label'].textTransform,
}));

const Autocomplete8 = styled(Autocomplete)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `28px 0px 0px 0px`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Components']['Label'].fontStyle,
  fontFamily: theme.typography['Components']['Label'].fontFamily,
  fontWeight: theme.typography['Components']['Label'].fontWeight,
  fontSize: theme.typography['Components']['Label'].fontSize,
  letterSpacing: theme.typography['Components']['Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Label'].lineHeight,
  textDecoration: theme.typography['Components']['Label'].textDecoration,
  textTransform: theme.typography['Components']['Label'].textTransform,
}));

function Autocomplete1(props) {
  return (
    <Autocomplete2 className={props.className}>
      <Autocomplete3
        options={[]}
        multiple={false}
        helperText={'new'}
        renderInput={(params) => (
          <TextField
            {...params}
            fullWidth={true}
            helperText={'Helper text'}
            variant={'standard'}
            label={'Label'}
            InputProps={{}}
          />
        )}
      />
      <Autocomplete4
        options={[]}
        multiple={false}
        error={true}
        renderInput={(params) => (
          <TextField
            {...params}
            fullWidth={true}
            variant={'outlined'}
            label={'Label'}
            InputProps={{}}
          />
        )}
      />
      <Autocomplete5
        options={[]}
        multiple={false}
        renderInput={(params) => (
          <TextField
            {...params}
            fullWidth={true}
            variant={'filled'}
            label={'Label'}
            InputProps={{}}
          />
        )}
      />
      <Autocomplete6
        options={[]}
        multiple={true}
        renderInput={(params) => (
          <TextField
            {...params}
            fullWidth={true}
            variant={'standard'}
            label={'Label'}
            InputProps={{}}
          />
        )}
      />
      <Autocomplete7
        options={[]}
        multiple={true}
        renderInput={(params) => (
          <TextField
            {...params}
            fullWidth={true}
            variant={'outlined'}
            label={'Label'}
            InputProps={{}}
          />
        )}
      />
      <Autocomplete8
        options={[]}
        multiple={true}
        renderInput={(params) => (
          <TextField
            {...params}
            fullWidth={true}
            variant={'filled'}
            label={'Label'}
            InputProps={{}}
          />
        )}
      />
    </Autocomplete2>
  );
}

export default Autocomplete1;
