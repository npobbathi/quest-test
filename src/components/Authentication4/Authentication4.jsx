/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { TextField, Button, Link as MUILink } from '@mui/material';
import { Helmet } from 'react-helmet-async';
import LogoImage from 'src/assets/images/Authentication4_Logo.png';
import GoogleImage from 'src/assets/images/Authentication4_google.png';
import { styled } from '@mui/material/styles';
import PicImageImage from 'src/assets/images/Authentication4_pic.png';
import useAuthentication4 from 'src/components/Authentication4/useAuthentication4';

const ScreenDesktop = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  width: '100%',
  height: '100vh',
  justifyContent:
    data.currentVariant === 'ScreenScreen2' ? `center` : `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
}));

const LeftSide = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `flex-start`,
  padding: data.currentVariant === 'ScreenScreen2' ? `100px 30px` : `0px`,
  boxSizing: `border-box`,
  alignSelf: data.currentVariant === 'ScreenScreen2' ? 'unset' : `stretch`,
  width: data.currentVariant === 'ScreenScreen2' ? 'unset' : `700px`,
  margin: `0px`,
  flex: data.currentVariant === 'ScreenScreen2' ? `1` : 'unset',
}));

const LogIn = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `center`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
  overflow: `hidden`,
});

const Top = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Logo = styled('img')({
  height: `62.23px`,
  width: `48.38px`,
  objectFit: `contain`,
  margin: `0px`,
});

const LogInToYourAccount = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  textAlign: `center`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle:
    data.currentVariant === 'ScreenScreen2'
      ? theme.typography['Typography']['H6'].fontStyle
      : theme.typography['Typography']['H5'].fontStyle,
  fontFamily:
    data.currentVariant === 'ScreenScreen2'
      ? theme.typography['Typography']['H6'].fontFamily
      : theme.typography['Typography']['H5'].fontFamily,
  fontWeight:
    data.currentVariant === 'ScreenScreen2'
      ? theme.typography['Typography']['H6'].fontWeight
      : theme.typography['Typography']['H5'].fontWeight,
  fontSize:
    data.currentVariant === 'ScreenScreen2'
      ? theme.typography['Typography']['H6'].fontSize
      : theme.typography['Typography']['H5'].fontSize,
  letterSpacing:
    data.currentVariant === 'ScreenScreen2'
      ? theme.typography['Typography']['H6'].letterSpacing
      : theme.typography['Typography']['H5'].letterSpacing,
  lineHeight:
    data.currentVariant === 'ScreenScreen2'
      ? theme.typography['Typography']['H6'].lineHeight
      : theme.typography['Typography']['H5'].lineHeight,
  textDecoration:
    data.currentVariant === 'ScreenScreen2'
      ? theme.typography['Typography']['H6'].textDecoration
      : theme.typography['Typography']['H5'].textDecoration,
  textTransform:
    data.currentVariant === 'ScreenScreen2'
      ? theme.typography['Typography']['H6'].textTransform
      : theme.typography['Typography']['H5'].textTransform,
  margin: `30px 0px 0px 0px`,
}));

const Sec = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `50px 0px 0px 0px`,
});

const SignUpGoogle = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  boxShadow: theme.customShadows['switchShadow'].boxShadow,
  border: `1px solid rgba(176, 176, 176, 1)`,
  boxSizing: `border-box`,
  borderRadius: `4px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `center`,
  alignItems: `center`,
  padding: `0px 34px`,
  width: data.currentVariant === 'ScreenScreen2' ? 'unset' : `349px`,
  margin: `0px`,
  overflow: `hidden`,
  alignSelf: data.currentVariant === 'ScreenScreen2' ? `stretch` : 'unset',
}));

const UnstyledButton = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `center`,
  padding: `8px 22px`,
  boxSizing: `border-box`,
  height: `42px`,
  margin: `0px`,
  overflow: `hidden`,
});

const Google = styled('img')({
  height: `25.83px`,
  width: `25.83px`,
  objectFit: `cover`,
  margin: `0px`,
});

const Txt = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `10px`,
  boxSizing: `border-box`,
  margin: `0px 0px 0px 13px`,
});

const Button1 = styled('div')({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(0, 0, 0, 0.87)`,
  fontStyle: `normal`,
  fontFamily: `Heebo`,
  fontWeight: `500`,
  fontSize: `14px`,
  letterSpacing: `0.5px`,
  textDecoration: `none`,
  lineHeight: `21px`,
  textTransform: `none`,
  margin: `0px`,
});

const Divider = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `349px`,
  margin: `24px 0px 0px 0px`,
  overflow: `hidden`,
});

const Frame1 = styled('div')(({ theme }) => ({
  backgroundColor: theme.palette['Other']['Divider'],
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `center`,
  flex: `1`,
  height: `2px`,
  margin: `0px`,
  overflow: `hidden`,
}));

const Or = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Typography']['Caption'].fontStyle,
  fontFamily: theme.typography['Typography']['Caption'].fontFamily,
  fontWeight: theme.typography['Typography']['Caption'].fontWeight,
  fontSize: theme.typography['Typography']['Caption'].fontSize,
  letterSpacing: theme.typography['Typography']['Caption'].letterSpacing,
  lineHeight: theme.typography['Typography']['Caption'].lineHeight,
  textDecoration: theme.typography['Typography']['Caption'].textDecoration,
  textTransform: theme.typography['Typography']['Caption'].textTransform,
  margin: `0px 0px 0px 10px`,
}));

const Frame2 = styled('div')(({ theme }) => ({
  backgroundColor: theme.palette['Other']['Divider'],
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `center`,
  flex: `1`,
  height: `2px`,
  margin: `0px 0px 0px 10px`,
  overflow: `hidden`,
}));

const Input1 = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `349px`,
  margin: `24px 0px 0px 0px`,
});

const TextFieldStandard = styled(TextField, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `12px`,
  letterSpacing: `0.15000000596046448px`,
  textDecoration: `none`,
  lineHeight: `12px`,
  textTransform: `none`,
}));

const TextFieldStandard1 = styled(TextField, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  alignSelf: `stretch`,
  margin: `30px 0px 0px 0px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `12px`,
  letterSpacing: `0.15000000596046448px`,
  textDecoration: `none`,
  lineHeight: `12px`,
  textTransform: `none`,
}));

const Btm = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `349px`,
  margin: `24px 0px 0px 0px`,
});

const ButtonContained = styled(Button, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  color: theme.palette['Primary']['Contrast'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `500`,
  fontSize: `15px`,
  letterSpacing: `0.46000000834465027px`,
  textDecoration: `none`,
  lineHeight: `26px`,
  textTransform: `uppercase`,
}));

const Txt1 = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `24px 0px 0px 0px`,
});

const HavingTroubleLogging = styled('div')(({ theme }) => ({
  textAlign: `center`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Typography']['Body 2'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 2'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 2'].fontWeight,
  fontSize: theme.typography['Typography']['Body 2'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 2'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 2'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 2'].textDecoration,
  textTransform: theme.typography['Typography']['Body 2'].textTransform,
  margin: `0px`,
}));

const Link1 = styled(MUILink)(({ theme }) => ({
  color: theme.palette['Primary']['Main'],
  fontStyle: theme.typography['Typography']['Body 1'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 1'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 1'].fontWeight,
  fontSize: theme.typography['Typography']['Body 1'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 1'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 1'].lineHeight,
  textTransform: theme.typography['Typography']['Body 1'].textTransform,
  margin: `4px 0px 0px 0px`,
}));

const LoremIpsumDisclaimer = styled('div')(({ theme }) => ({
  textAlign: `center`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Typography']['Caption'].fontStyle,
  fontFamily: theme.typography['Typography']['Caption'].fontFamily,
  fontWeight: theme.typography['Typography']['Caption'].fontWeight,
  fontSize: theme.typography['Typography']['Caption'].fontSize,
  letterSpacing: theme.typography['Typography']['Caption'].letterSpacing,
  lineHeight: theme.typography['Typography']['Caption'].lineHeight,
  textDecoration: theme.typography['Typography']['Caption'].textDecoration,
  textTransform: theme.typography['Typography']['Caption'].textTransform,
  width: `230px`,
  margin: `24px 0px 0px 0px`,
}));

const Pic = styled('div')({
  backgroundImage: `url(${PicImageImage})`,
  backgroundPosition: `center`,
  backgroundSize: `cover`,
  backgroundRepeat: `no-repeat`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  alignSelf: `stretch`,
  flex: `1`,
  margin: `0px`,
  overflow: `hidden`,
});

function Authentication4(props) {
  const { data } = useAuthentication4();

  return (
    <ScreenDesktop className={props.className} data={data}>
      <Helmet>
        <title>Authentication-4</title>
      </Helmet>
      <LeftSide data={data}>
        <LogIn>
          <Top>
            <Logo src={LogoImage} loading="lazy" alt={'Logo'} />
            <LogInToYourAccount data={data}>
              {`Log In to your Account`}
            </LogInToYourAccount>
          </Top>
          <Sec>
            <SignUpGoogle data={data}>
              <UnstyledButton>
                <Google src={GoogleImage} loading="lazy" alt={'google'} />
                <Txt>
                  <Button1>{`Sign Up with Google`}</Button1>
                </Txt>
              </UnstyledButton>
            </SignUpGoogle>
            <Divider>
              <Frame1></Frame1>
              <Or>{`OR`}</Or>
              <Frame2></Frame2>
            </Divider>
            <Input1>
              <TextFieldStandard
                variant="standard"
                disabled={false}
                size={'medium'}
                label={'User Name'}
                data={data}
              />
              <TextFieldStandard1
                variant="standard"
                disabled={false}
                size={'medium'}
                label={'Password'}
                data={data}
              />
            </Input1>
            <Btm>
              <ButtonContained
                variant="contained"
                disabled={false}
                size={'large'}
                color={'primary'}
                data={data}
              >
                {'CONTINUE WITH EMAIL'}
              </ButtonContained>
              <Txt1>
                <HavingTroubleLogging>
                  {`Having trouble logging in?`}
                </HavingTroubleLogging>
                <Link1 href="#" underline="always">
                  Forgot Password
                </Link1>
              </Txt1>
              <LoremIpsumDisclaimer>
                {`Lorem ipsum disclaimer and terms not to be read and only for placement .`}
              </LoremIpsumDisclaimer>
            </Btm>
          </Sec>
        </LogIn>
      </LeftSide>
      {!(data.currentVariant === 'ScreenScreen2') && <Pic></Pic>}
    </ScreenDesktop>
  );
}

export default Authentication4;
