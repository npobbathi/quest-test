/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { Helmet } from 'react-helmet-async';
import ArrowImage from 'src/assets/images/ProductList1_arrow.png';
import { styled } from '@mui/material/styles';
import ProductCard4 from 'src/components/ProductCard4/ProductCard4';
import { animated, useSpring, easings } from 'react-spring';
import useProductList1 from 'src/components/ProductList1/useProductList1';

const ScreenDesktop = styled('div')({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `40px 48px`,
  boxSizing: `border-box`,
  height: 'auto',
});

const Top = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Frame1 = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: data.currentVariant === 'ScreenMobile' ? `column` : `row`,
  justifyContent:
    data.currentVariant === 'ScreenMobile' ? `flex-start` : `space-between`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Txt = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
  alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
}));

const Title = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(0, 0, 0, 1)`,
  fontStyle: theme.typography['Typography']['H4'].fontStyle,
  fontFamily: theme.typography['Typography']['H4'].fontFamily,
  fontWeight: theme.typography['Typography']['H4'].fontWeight,
  fontSize: theme.typography['Typography']['H4'].fontSize,
  letterSpacing: theme.typography['Typography']['H4'].letterSpacing,
  lineHeight: theme.typography['Typography']['H4'].lineHeight,
  textDecoration: theme.typography['Typography']['H4'].textDecoration,
  textTransform: theme.typography['Typography']['H4'].textTransform,
  margin: `0px`,
  alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
}));

const Title1 = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(0, 0, 0, 1)`,
  fontStyle: theme.typography['Typography']['H6'].fontStyle,
  fontFamily: theme.typography['Typography']['H6'].fontFamily,
  fontWeight: theme.typography['Typography']['H6'].fontWeight,
  fontSize: theme.typography['Typography']['H6'].fontSize,
  letterSpacing: theme.typography['Typography']['H6'].letterSpacing,
  lineHeight: theme.typography['Typography']['H6'].lineHeight,
  textDecoration: theme.typography['Typography']['H6'].textDecoration,
  textTransform: theme.typography['Typography']['H6'].textTransform,
  margin: `14px 0px 0px 0px`,
  alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
}));

const Sort = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: data.currentVariant === 'ScreenMobile' ? `20px 0px 0px 0px` : `0px`,
}));

const Sort1 = styled('div')({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(0, 0, 0, 1)`,
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `500`,
  fontSize: `20px`,
  letterSpacing: `0.5px`,
  textDecoration: `none`,
  lineHeight: `44px`,
  textTransform: `none`,
  margin: `0px`,
});

const Arrow = styled('img')({
  height: `8px`,
  width: `17px`,
  margin: `0px 0px 0px 6px`,
});

const Divider = styled('div')({
  backgroundColor: `rgba(236, 236, 236, 1)`,
  borderRadius: `0px`,
  alignSelf: `stretch`,
  height: `2px`,
  margin: `14px 0px 0px 0px`,
});

const Products = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `60px 0px 0px 0px`,
});

const ProductsRow = animated(
  styled('div')({
    borderRadius: `0px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `34px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `0px`,
    overflow: `hidden`,
  })
);

const ProductCard41 = styled(ProductCard4)(({ theme }) => ({
  flex: `1`,
  margin: `0px`,
}));

const ProductCard42 = styled(ProductCard4)(({ theme }) => ({
  flex: `1`,
  margin: `0px 0px 0px 60px`,
}));

const ProductCard43 = styled(ProductCard4)(({ theme }) => ({
  flex: `1`,
  margin: `0px 0px 0px 60px`,
}));

const ProductCard44 = styled(ProductCard4)(({ theme }) => ({
  flex: `1`,
  margin: `0px 0px 0px 60px`,
}));

function ProductList1(props) {
  const { data } = useProductList1();

  const [ProductsRowSpring, ProductsRowApi] = useSpring(() => ({
    config: {
      duration: 1000,
      easing: easings['easeInOutQuint'],
    },
    delay: 1250,
    from: { transform: 'translateY(100px) scale(1.4)', opacity: 0 },
  }));

  React.useEffect(() => {
    ProductsRowApi.start({
      ...{ transform: 'translateY(0px) scale(1)', opacity: 1 },
      delay: 1250,
      config: { duration: 1000 },
    });
  }, []);

  return (
    <ScreenDesktop className={props.className}>
      <Helmet>
        <title>ProductList1</title>
      </Helmet>
      <Top>
        <Frame1 data={data}>
          <Txt data={data}>
            <Title data={data}>{`Cold-pressed Juices`}</Title>
            <Title1 data={data}>
              {`Healthy living never tasted this good.`}
            </Title1>
          </Txt>
          <Sort data={data}>
            <Sort1>{`Sort By`}</Sort1>
            <Arrow src={ArrowImage} loading="lazy" alt={'arrow'} />
          </Sort>
        </Frame1>
        <Divider></Divider>
      </Top>
      <Products>
        <ProductsRow style={{ ...ProductsRowSpring }}>
          <ProductCard41 />
          {!(data.currentVariant === 'ScreenMobile') && <ProductCard42 />}
          {!(data.currentVariant === 'ScreenTablet') &&
            !(data.currentVariant === 'ScreenMobile') && <ProductCard43 />}
          {!(data.currentVariant === 'ScreenTablet') &&
            !(data.currentVariant === 'ScreenMobile') && <ProductCard44 />}
        </ProductsRow>
      </Products>
    </ScreenDesktop>
  );
}

export default ProductList1;
