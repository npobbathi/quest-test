/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { SvgIcon, LinearProgress, Button } from '@mui/material';
import { IconX } from 'lib';
import { styled } from '@mui/material/styles';
import TestNest from 'src/components/TestNest/TestNest';

const TypeQuest = styled('div')(({ theme }) => ({
  backgroundColor: theme.palette['Primary']['Shades']['8p'],
  boxShadow: `0px 4px 4px rgba(0, 0, 0, 0.07)`,
  borderRadius: `6px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: '100%',
  justifyContent: `center`,
  alignItems: `flex-start`,
  padding: `16px`,
  boxSizing: `border-box`,
  height: 'auto',
}));

const Side1 = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-end`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Txt = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const LoremIpsumTitle = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Typography']['Subtitle 1'].fontStyle,
  fontFamily: theme.typography['Typography']['Subtitle 1'].fontFamily,
  fontWeight: theme.typography['Typography']['Subtitle 1'].fontWeight,
  fontSize: theme.typography['Typography']['Subtitle 1'].fontSize,
  letterSpacing: theme.typography['Typography']['Subtitle 1'].letterSpacing,
  lineHeight: theme.typography['Typography']['Subtitle 1'].lineHeight,
  textDecoration: theme.typography['Typography']['Subtitle 1'].textDecoration,
  textTransform: theme.typography['Typography']['Subtitle 1'].textTransform,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const SubtitleLoremIpsumNo = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Typography']['Body 3'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 3'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 3'].fontWeight,
  fontSize: theme.typography['Typography']['Body 3'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 3'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 3'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 3'].textDecoration,
  textTransform: theme.typography['Typography']['Body 3'].textTransform,
  alignSelf: `stretch`,
  margin: `6px 0px 0px 0px`,
}));

const IconX1 = styled(SvgIcon)({
  width: `24px`,
  height: `24px`,
  margin: `0px 0px 0px 20px`,
});

const ProgressLinear = styled(LinearProgress)(({ theme }) => ({
  alignSelf: `stretch`,
  height: `4px`,
  margin: `20px 0px 0px 0px`,
}));

const Side2 = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `20px 0px 0px 0px`,
});

const ButtonText = styled(Button)(({ theme }) => ({
  flex: `1`,
  margin: `0px`,
  color: theme.palette['Primary']['Main'],
  fontStyle: theme.typography['Components']['Button Font - Medium'].fontStyle,
  fontFamily: theme.typography['Components']['Button Font - Medium'].fontFamily,
  fontWeight: theme.typography['Components']['Button Font - Medium'].fontWeight,
  fontSize: theme.typography['Components']['Button Font - Medium'].fontSize,
  letterSpacing:
    theme.typography['Components']['Button Font - Medium'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Font - Medium'].lineHeight,
  textDecoration:
    theme.typography['Components']['Button Font - Medium'].textDecoration,
  textTransform:
    theme.typography['Components']['Button Font - Medium'].textTransform,
}));

const ButtonOutlined = styled(Button)(({ theme }) => ({
  flex: `1`,
  margin: `0px 0px 0px 12px`,
  color: theme.palette['Primary']['Main'],
  fontStyle: theme.typography['Components']['Button Font - Medium'].fontStyle,
  fontFamily: theme.typography['Components']['Button Font - Medium'].fontFamily,
  fontWeight: theme.typography['Components']['Button Font - Medium'].fontWeight,
  fontSize: theme.typography['Components']['Button Font - Medium'].fontSize,
  letterSpacing:
    theme.typography['Components']['Button Font - Medium'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Font - Medium'].lineHeight,
  textDecoration:
    theme.typography['Components']['Button Font - Medium'].textDecoration,
  textTransform:
    theme.typography['Components']['Button Font - Medium'].textTransform,
}));

const TestNest1 = styled(TestNest)(({ theme }) => ({
  height: `223px`,
  width: `158px`,
  margin: `20px 0px 0px 0px`,
}));

const TestNest2 = styled(TestNest)(({ theme }) => ({
  height: `223px`,
  width: `158px`,
  margin: `20px 0px 0px 0px`,
}));

function SidebarCardNest(props) {
  return (
    <TypeQuest className={props.className}>
      <Side1>
        <Txt>
          <LoremIpsumTitle>{`Lorem Ipsum title`}</LoremIpsumTitle>
          <SubtitleLoremIpsumNo>
            {`Subtitle lorem Ipsum not to be read for placement only`}
          </SubtitleLoremIpsumNo>
        </Txt>
        <IconX1 fontSize={'inherit'} component={IconX} />
      </Side1>
      <ProgressLinear
        variant={'determinate'}
        color={'primary'}
      ></ProgressLinear>
      <Side2>
        <ButtonText
          variant="text"
          size={'medium'}
          color={'primary'}
          disabled={false}
        >
          {'DISMISS'}
        </ButtonText>
        <ButtonOutlined
          variant="outlined"
          size={'medium'}
          color={'primary'}
          disabled={false}
        >
          {'LEARN'}
        </ButtonOutlined>
      </Side2>
      <TestNest1 />
      <TestNest2 />
    </TypeQuest>
  );
}

export default SidebarCardNest;
